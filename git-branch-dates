#!/bin/bash

# -----------------------------------------------------------------------------
# Script: git-branch-dates
# Description: This script fetches all branches in a git repository, displays
#              their creation and last update dates in a formatted table.
#
# Author: Your Name <your.email@example.com>
# Date: 2024-08-30
#
# License: MIT License
#          Permission is hereby granted, free of charge, to any person obtaining
#          a copy of this software and associated documentation files (the
#          "Software"), to deal in the Software without restriction, including
#          without limitation the rights to use, copy, modify, merge, publish,
#          distribute, sublicense, and/or sell copies of the Software, and to
#          permit persons to whom the Software is furnished to do so, subject to
#          the following conditions:
#          
#          The above copyright notice and this permission notice shall be included
#          in all copies or substantial portions of the Software.
#          
#          THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
#          EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
#          MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
#          IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
#          CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
#          TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
#          SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
#
# Setup Instructions:
# 1. Download this script and save it to the appropriate directory:
#    - On macOS: Use the following path:
#      sudo nano /usr/local/bin/git-branch-dates
#    - On Linux: Use the following path:
#      sudo nano /usr/local/bin/git-branch-dates
#
# 2. Make the script executable by running:
#    sudo chmod +x /usr/local/bin/git-branch-dates
#
# 3. To use the script globally, run:
#    git-branch-dates
#
# Note: The above steps will allow you to use the `git-branch-dates` command 
#       from any git repository on your system.
# -----------------------------------------------------------------------------

# Fetch all branches to ensure we have the latest data
git fetch --all

# Function to format the date
format_date() {
  local date_string="$1"
  date -j -f "%Y-%m-%d %H:%M:%S %z" "$date_string" "+%Y-%m-%d %H:%M:%S %Z" 2>/dev/null
}

# List all local and remote branches, excluding the detached HEAD reference, and remove duplicates
branches=$(git branch -a | sed 's/^\* //' | sort | uniq)

# Format string for printf
format_string="%-70s %-25s %-25s\n"

# Header with fixed-width columns
printf "$format_string" "Branch Name" "Creation Date" "Last Update Date"

for branch in $branches; do
  # Skip lines that contain '->' or are empty, as they are not valid branch names
  if [[ "$branch" == *"->"* || -z "$branch" ]]; then
    continue
  fi

  # Get the first commit date (creation date) and format it
  creation_date=$(git log --reverse --pretty=format:'%ci' "$branch" 2>/dev/null | head -n 1)
  creation_date=$(format_date "$creation_date")

  # Get the last commit date (last update date) and format it
  last_update_date=$(git log -1 --pretty=format:'%ci' "$branch" 2>/dev/null)
  last_update_date=$(format_date "$last_update_date")

  # Print branch name, creation date, and last update date with aligned columns
  printf "$format_string" "$branch" "$creation_date" "$last_update_date"
done
